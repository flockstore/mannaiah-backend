// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/flockstore/mannaiah-backend/apps/contacts/domain"
	mock "github.com/stretchr/testify/mock"
)

// ContactRepository is an autogenerated mock type for the ContactRepository type
type ContactRepository struct {
	mock.Mock
}

type ContactRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ContactRepository) EXPECT() *ContactRepository_Expecter {
	return &ContactRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *ContactRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ContactRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *ContactRepository_Expecter) Delete(id interface{}) *ContactRepository_Delete_Call {
	return &ContactRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *ContactRepository_Delete_Call) Run(run func(id string)) *ContactRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContactRepository_Delete_Call) Return(_a0 error) *ContactRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactRepository_Delete_Call) RunAndReturn(run func(string) error) *ContactRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDocument provides a mock function with given fields: docType, docNumber
func (_m *ContactRepository) GetByDocument(docType domain.DocumentType, docNumber string) (*domain.Contact, error) {
	ret := _m.Called(docType, docNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByDocument")
	}

	var r0 *domain.Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.DocumentType, string) (*domain.Contact, error)); ok {
		return rf(docType, docNumber)
	}
	if rf, ok := ret.Get(0).(func(domain.DocumentType, string) *domain.Contact); ok {
		r0 = rf(docType, docNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.DocumentType, string) error); ok {
		r1 = rf(docType, docNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactRepository_GetByDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDocument'
type ContactRepository_GetByDocument_Call struct {
	*mock.Call
}

// GetByDocument is a helper method to define mock.On call
//   - docType domain.DocumentType
//   - docNumber string
func (_e *ContactRepository_Expecter) GetByDocument(docType interface{}, docNumber interface{}) *ContactRepository_GetByDocument_Call {
	return &ContactRepository_GetByDocument_Call{Call: _e.mock.On("GetByDocument", docType, docNumber)}
}

func (_c *ContactRepository_GetByDocument_Call) Run(run func(docType domain.DocumentType, docNumber string)) *ContactRepository_GetByDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.DocumentType), args[1].(string))
	})
	return _c
}

func (_c *ContactRepository_GetByDocument_Call) Return(_a0 *domain.Contact, _a1 error) *ContactRepository_GetByDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactRepository_GetByDocument_Call) RunAndReturn(run func(domain.DocumentType, string) (*domain.Contact, error)) *ContactRepository_GetByDocument_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *ContactRepository) GetByID(id string) (*domain.Contact, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Contact, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Contact); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ContactRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *ContactRepository_Expecter) GetByID(id interface{}) *ContactRepository_GetByID_Call {
	return &ContactRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *ContactRepository_GetByID_Call) Run(run func(id string)) *ContactRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContactRepository_GetByID_Call) Return(_a0 *domain.Contact, _a1 error) *ContactRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactRepository_GetByID_Call) RunAndReturn(run func(string) (*domain.Contact, error)) *ContactRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *ContactRepository) List() ([]*domain.Contact, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Contact
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Contact, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Contact); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ContactRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *ContactRepository_Expecter) List() *ContactRepository_List_Call {
	return &ContactRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *ContactRepository_List_Call) Run(run func()) *ContactRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContactRepository_List_Call) Return(_a0 []*domain.Contact, _a1 error) *ContactRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactRepository_List_Call) RunAndReturn(run func() ([]*domain.Contact, error)) *ContactRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: contact
func (_m *ContactRepository) Save(contact *domain.Contact) error {
	ret := _m.Called(contact)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Contact) error); ok {
		r0 = rf(contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ContactRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - contact *domain.Contact
func (_e *ContactRepository_Expecter) Save(contact interface{}) *ContactRepository_Save_Call {
	return &ContactRepository_Save_Call{Call: _e.mock.On("Save", contact)}
}

func (_c *ContactRepository_Save_Call) Run(run func(contact *domain.Contact)) *ContactRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Contact))
	})
	return _c
}

func (_c *ContactRepository_Save_Call) Return(_a0 error) *ContactRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactRepository_Save_Call) RunAndReturn(run func(*domain.Contact) error) *ContactRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewContactRepository creates a new instance of ContactRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContactRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContactRepository {
	mock := &ContactRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
